{"ast":null,"code":"var clientId='2e1be650ee644ff9bac074f7d38d8040';var redirectUri='http://localhost:3000/';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');// This clears the parameters, allowing us to grab a new access token when it expires.\nreturn accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/elisk/OneDrive/Dokumenty/IT_kurzy/Codecademy/projects/jamming-reactapp/src/util/Spotify.js"],"sourcesContent":["const clientId = '2e1be650ee644ff9bac074f7d38d8040'; \r\nconst redirectUri = 'http://localhost:3000/';\r\nlet accessToken;\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken;\r\n      }\r\n  \r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}` };\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n      ).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris})\r\n          });\r\n        });\r\n      });\r\n    }\r\n};\r\n\r\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}